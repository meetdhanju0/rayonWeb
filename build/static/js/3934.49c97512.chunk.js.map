{"version":3,"file":"static/js/3934.49c97512.chunk.js","mappings":"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","sources":["component/contact/ContactContant.js","../node_modules/@emailjs/browser/es/models/EmailJSResponseStatus.js","../node_modules/@emailjs/browser/es/utils/createWebStorage/createWebStorage.js","../node_modules/@emailjs/browser/es/store/store.js","../node_modules/@emailjs/browser/es/utils/buildOptions/buildOptions.js","../node_modules/@emailjs/browser/es/api/sendPost.js","../node_modules/@emailjs/browser/es/utils/validateParams/validateParams.js","../node_modules/@emailjs/browser/es/utils/isHeadless/isHeadless.js","../node_modules/@emailjs/browser/es/errors/headlessError/headlessError.js","../node_modules/@emailjs/browser/es/utils/isBlockedValueInParams/isBlockedValueInParams.js","../node_modules/@emailjs/browser/es/utils/validateBlockListParams/validateBlockListParams.js","../node_modules/@emailjs/browser/es/errors/blockedEmailError/blockedEmailError.js","../node_modules/@emailjs/browser/es/utils/isLimitRateHit/isLimitRateHit.js","../node_modules/@emailjs/browser/es/utils/validateLimitRateParams/validateLimitRateParams.js","../node_modules/@emailjs/browser/es/errors/limitRateError/limitRateError.js","../node_modules/@emailjs/browser/es/index.js","../node_modules/@emailjs/browser/es/methods/init/init.js","../node_modules/@emailjs/browser/es/methods/send/send.js","../node_modules/@emailjs/browser/es/utils/validateTemplateParams/validateTemplateParams.js","../node_modules/@emailjs/browser/es/methods/sendForm/sendForm.js","../node_modules/@emailjs/browser/es/utils/validateForm/validateForm.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport emailjs from '@emailjs/browser';\nimport { BiLoaderCircle } from 'react-icons/bi';\n\n\nconst ContactContant = () => {\n    const [formData, setFormData] = useState({\n        name: '',\n        email: '',\n        subject: '',\n        message: '',\n    });\n    const [loading, setLoading] = useState(false);\n    const [successMessage, setSuccessMessage] = useState('');\n\n    // Clear success message after 5 seconds\n    useEffect(() => {\n        if (successMessage) {\n            const timer = setTimeout(() => {\n                setSuccessMessage('');\n            }, 5000); // 5000ms = 5 seconds\n\n            return () => clearTimeout(timer);\n        }\n    }, [successMessage]);\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData({ ...formData, [name]: value });\n    };\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        setLoading(true);\n        setSuccessMessage('');\n\n        emailjs.send(\n            'service_wqzvvnl',\n            'template_bvynfqg',\n            {\n                name: formData.name,\n                email: formData.email,\n                subject: formData.subject,\n                message: formData.message,\n            },\n            'tb1ZmJ7PCnRghiZiO'\n        ).then((result) => {\n            setLoading(false);\n            setSuccessMessage('Your message has been sent successfully!');\n            setFormData({ name: '', email: '', subject: '', message: '' });\n        }, (error) => {\n            setLoading(false);\n            setSuccessMessage('An error occurred, please try again.');\n        });\n    };\n\n\n    return (\n        <>\n            <div className=\"container-xxl py-5\">\n                <div className=\"container py-5 px-lg-5\">\n                    <div className=\"wow fadeInUp\" data-wow-delay=\"0.1s\">\n                        <p className=\"section-title text-secondary justify-content-center\"><span />Contact Us<span /></p>\n                        <h1 className=\"text-center mb-5\">Contact For Any Query</h1>\n                    </div>\n                    <div className=\"row justify-content-center\">\n                        <div className=\"col-lg-7\">\n                            <div className=\"wow fadeInUp\" data-wow-delay=\"0.3s\">\n                                <form onSubmit={handleSubmit}>\n                                    <div className=\"row g-3\">\n                                        <div className=\"col-md-6\">\n                                            <div className=\"form-floating\">\n                                                <input\n                                                    type=\"text\"\n                                                    className=\"form-control\"\n                                                    id=\"name\"\n                                                    name=\"name\"\n                                                    placeholder=\"Your Name\"\n                                                    value={formData.name}\n                                                    onChange={handleChange}\n                                                    required\n                                                />\n                                                <label htmlFor=\"name\">Your Name</label>\n                                            </div>\n                                        </div>\n                                        <div className=\"col-md-6\">\n                                            <div className=\"form-floating\">\n                                                <input\n                                                    type=\"email\"\n                                                    className=\"form-control\"\n                                                    id=\"email\"\n                                                    name=\"email\"\n                                                    placeholder=\"Your Email\"\n                                                    value={formData.email}\n                                                    onChange={handleChange}\n                                                    required\n                                                />\n                                                <label htmlFor=\"email\">Your Email</label>\n                                            </div>\n                                        </div>\n                                        <div className=\"col-12\">\n                                            <div className=\"form-floating\">\n                                                <input\n                                                    type=\"text\"\n                                                    className=\"form-control\"\n                                                    id=\"subject\"\n                                                    name=\"subject\"\n                                                    placeholder=\"Subject\"\n                                                    value={formData.subject}\n                                                    onChange={handleChange}\n                                                    required\n                                                />\n                                                <label htmlFor=\"subject\">Subject</label>\n                                            </div>\n                                        </div>\n                                        <div className=\"col-12\">\n                                            <div className=\"form-floating\">\n                                                <textarea\n                                                    className=\"form-control\"\n                                                    placeholder=\"Leave a message here\"\n                                                    id=\"message\"\n                                                    name=\"message\"\n                                                    style={{ height: 150 }}\n                                                    value={formData.message}\n                                                    onChange={handleChange}\n                                                    required\n                                                />\n                                                <label htmlFor=\"message\">Message</label>\n                                            </div>\n                                        </div>\n                                        <div className=\"col-12\">\n                                            <button className=\"btn btn-primary w-100 py-3\" type=\"submit\" disabled={loading}>\n                                                {loading ? <BiLoaderCircle className=\"spinner\" /> : 'Send Message'}\n                                            </button>\n                                        </div>\n                                    </div>\n                                </form>\n                                {successMessage && <div className=\"alert alert-success mt-3\">{successMessage}</div>}\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </>\n    )\n}\n\nexport default ContactContant","export class EmailJSResponseStatus {\n    constructor(_status = 0, _text = 'Network Error') {\n        this.status = _status;\n        this.text = _text;\n    }\n}\n","export const createWebStorage = () => {\n    if (typeof localStorage === 'undefined')\n        return;\n    return {\n        get: (key) => Promise.resolve(localStorage.getItem(key)),\n        set: (key, value) => Promise.resolve(localStorage.setItem(key, value)),\n        remove: (key) => Promise.resolve(localStorage.removeItem(key)),\n    };\n};\n","import { createWebStorage } from '../utils/createWebStorage/createWebStorage';\nexport const store = {\n    origin: 'https://api.emailjs.com',\n    blockHeadless: false,\n    storageProvider: createWebStorage(),\n};\n","export const buildOptions = (options) => {\n    if (!options)\n        return {};\n    // support compatibility with SDK v3\n    if (typeof options === 'string') {\n        return {\n            publicKey: options,\n        };\n    }\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (options.toString() === '[object Object]') {\n        return options;\n    }\n    return {};\n};\n","import { EmailJSResponseStatus } from '../models/EmailJSResponseStatus';\nimport { store } from '../store/store';\nexport const sendPost = async (url, data, headers = {}) => {\n    const response = await fetch(store.origin + url, {\n        method: 'POST',\n        headers,\n        body: data,\n    });\n    const message = await response.text();\n    const responseStatus = new EmailJSResponseStatus(response.status, message);\n    if (response.ok) {\n        return responseStatus;\n    }\n    throw responseStatus;\n};\n","export const validateParams = (publicKey, serviceID, templateID) => {\n    if (!publicKey || typeof publicKey !== 'string') {\n        throw 'The public key is required. Visit https://dashboard.emailjs.com/admin/account';\n    }\n    if (!serviceID || typeof serviceID !== 'string') {\n        throw 'The service ID is required. Visit https://dashboard.emailjs.com/admin';\n    }\n    if (!templateID || typeof templateID !== 'string') {\n        throw 'The template ID is required. Visit https://dashboard.emailjs.com/admin/templates';\n    }\n};\n","export const isHeadless = (navigator) => {\n    return navigator.webdriver || !navigator.languages || navigator.languages.length === 0;\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const headlessError = () => {\n    return new EmailJSResponseStatus(451, 'Unavailable For Headless Browser');\n};\n","import { validateBlockListParams } from '../validateBlockListParams/validateBlockListParams';\nconst isBlockListDisabled = (options) => {\n    return !options.list?.length || !options.watchVariable;\n};\nconst getValue = (data, name) => {\n    return data instanceof FormData ? data.get(name) : data[name];\n};\nexport const isBlockedValueInParams = (options, params) => {\n    if (isBlockListDisabled(options))\n        return false;\n    validateBlockListParams(options.list, options.watchVariable);\n    const value = getValue(params, options.watchVariable);\n    if (typeof value !== 'string')\n        return false;\n    return options.list.includes(value);\n};\n","export const validateBlockListParams = (list, watchVariable) => {\n    if (!Array.isArray(list)) {\n        throw 'The BlockList list has to be an array';\n    }\n    if (typeof watchVariable !== 'string') {\n        throw 'The BlockList watchVariable has to be a string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const blockedEmailError = () => {\n    return new EmailJSResponseStatus(403, 'Forbidden');\n};\n","import { validateLimitRateParams } from '../validateLimitRateParams/validateLimitRateParams';\nconst getLeftTime = async (id, throttle, storage) => {\n    const lastTime = Number((await storage.get(id)) || 0);\n    return throttle - Date.now() + lastTime;\n};\nexport const isLimitRateHit = async (defaultID, options, storage) => {\n    if (!options.throttle || !storage) {\n        return false;\n    }\n    validateLimitRateParams(options.throttle, options.id);\n    const id = options.id || defaultID;\n    const leftTime = await getLeftTime(id, options.throttle, storage);\n    if (leftTime > 0) {\n        return true;\n    }\n    await storage.set(id, Date.now().toString());\n    return false;\n};\n","export const validateLimitRateParams = (throttle, id) => {\n    if (typeof throttle !== 'number' || throttle < 0) {\n        throw 'The LimitRate throttle has to be a positive number';\n    }\n    if (id && typeof id !== 'string') {\n        throw 'The LimitRate ID has to be a non-empty string';\n    }\n};\n","import { EmailJSResponseStatus } from '../../models/EmailJSResponseStatus';\nexport const limitRateError = () => {\n    return new EmailJSResponseStatus(429, 'Too Many Requests');\n};\n","import { EmailJSResponseStatus } from './models/EmailJSResponseStatus';\nimport { init } from './methods/init/init';\nimport { send } from './methods/send/send';\nimport { sendForm } from './methods/sendForm/sendForm';\nexport { init, send, sendForm, EmailJSResponseStatus };\nexport default {\n    init,\n    send,\n    sendForm,\n    EmailJSResponseStatus,\n};\n","import { store } from '../../store/store';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\n/**\n * EmailJS global SDK config\n * @param {object} options - the EmailJS global SDK config options\n * @param {string} origin - the non-default EmailJS origin\n */\nexport const init = (options, origin = 'https://api.emailjs.com') => {\n    if (!options)\n        return;\n    const opts = buildOptions(options);\n    store.publicKey = opts.publicKey;\n    store.blockHeadless = opts.blockHeadless;\n    store.storageProvider = opts.storageProvider;\n    store.blockList = opts.blockList;\n    store.limitRate = opts.limitRate;\n    store.origin = opts.origin || origin;\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { validateTemplateParams } from '../../utils/validateTemplateParams/validateTemplateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\n/**\n * Send a template to the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {object} templateParams - the template params, what will be set to the EmailJS template\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const send = async (serviceID, templateID, templateParams, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = opts.storageProvider || store.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    validateParams(publicKey, serviceID, templateID);\n    validateTemplateParams(templateParams);\n    if (templateParams && isBlockedValueInParams(blockList, templateParams)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    const params = {\n        lib_version: '4.4.1',\n        user_id: publicKey,\n        service_id: serviceID,\n        template_id: templateID,\n        template_params: templateParams,\n    };\n    return sendPost('/api/v1.0/email/send', JSON.stringify(params), {\n        'Content-type': 'application/json',\n    });\n};\n","export const validateTemplateParams = (templateParams) => {\n    // eslint-disable-next-line @typescript-eslint/no-base-to-string\n    if (templateParams && templateParams.toString() !== '[object Object]') {\n        throw 'The template params have to be the object. Visit https://www.emailjs.com/docs/sdk/send/';\n    }\n};\n","import { store } from '../../store/store';\nimport { sendPost } from '../../api/sendPost';\nimport { buildOptions } from '../../utils/buildOptions/buildOptions';\nimport { validateForm } from '../../utils/validateForm/validateForm';\nimport { validateParams } from '../../utils/validateParams/validateParams';\nimport { isHeadless } from '../../utils/isHeadless/isHeadless';\nimport { headlessError } from '../../errors/headlessError/headlessError';\nimport { isBlockedValueInParams } from '../../utils/isBlockedValueInParams/isBlockedValueInParams';\nimport { blockedEmailError } from '../../errors/blockedEmailError/blockedEmailError';\nimport { isLimitRateHit } from '../../utils/isLimitRateHit/isLimitRateHit';\nimport { limitRateError } from '../../errors/limitRateError/limitRateError';\nconst findHTMLForm = (form) => {\n    return typeof form === 'string' ? document.querySelector(form) : form;\n};\n/**\n * Send a form the specific EmailJS service\n * @param {string} serviceID - the EmailJS service ID\n * @param {string} templateID - the EmailJS template ID\n * @param {string | HTMLFormElement} form - the form element or selector\n * @param {object} options - the EmailJS SDK config options\n * @returns {Promise<EmailJSResponseStatus>}\n */\nexport const sendForm = async (serviceID, templateID, form, options) => {\n    const opts = buildOptions(options);\n    const publicKey = opts.publicKey || store.publicKey;\n    const blockHeadless = opts.blockHeadless || store.blockHeadless;\n    const storageProvider = store.storageProvider || opts.storageProvider;\n    const blockList = { ...store.blockList, ...opts.blockList };\n    const limitRate = { ...store.limitRate, ...opts.limitRate };\n    if (blockHeadless && isHeadless(navigator)) {\n        return Promise.reject(headlessError());\n    }\n    const currentForm = findHTMLForm(form);\n    validateParams(publicKey, serviceID, templateID);\n    validateForm(currentForm);\n    const formData = new FormData(currentForm);\n    if (isBlockedValueInParams(blockList, formData)) {\n        return Promise.reject(blockedEmailError());\n    }\n    if (await isLimitRateHit(location.pathname, limitRate, storageProvider)) {\n        return Promise.reject(limitRateError());\n    }\n    formData.append('lib_version', '4.4.1');\n    formData.append('service_id', serviceID);\n    formData.append('template_id', templateID);\n    formData.append('user_id', publicKey);\n    return sendPost('/api/v1.0/email/send-form', formData);\n};\n","export const validateForm = (form) => {\n    if (!form || form.nodeName !== 'FORM') {\n        throw 'The 3rd parameter is expected to be the HTML form element or the style selector of the form';\n    }\n};\n"],"names":["ContactContant","formData","setFormData","useState","name","email","subject","message","loading","setLoading","successMessage","setSuccessMessage","useEffect","timer","setTimeout","clearTimeout","handleChange","e","value","target","_objectSpread","_jsx","_Fragment","children","className","_jsxs","onSubmit","preventDefault","emailjs","then","result","error","type","id","placeholder","onChange","required","htmlFor","style","height","disabled","BiLoaderCircle","EmailJSResponseStatus","constructor","_status","arguments","length","undefined","_text","this","status","text","store","origin","blockHeadless","storageProvider","createWebStorage","localStorage","get","key","Promise","resolve","getItem","set","setItem","remove","removeItem","buildOptions","options","publicKey","toString","sendPost","async","url","data","headers","response","fetch","method","body","responseStatus","ok","validateParams","serviceID","templateID","isHeadless","navigator","webdriver","languages","headlessError","isBlockedValueInParams","params","_options$list","list","watchVariable","isBlockListDisabled","validateBlockListParams","Array","isArray","FormData","getValue","includes","blockedEmailError","isLimitRateHit","defaultID","storage","throttle","validateLimitRateParams","leftTime","lastTime","Number","Date","now","getLeftTime","limitRateError","init","opts","blockList","limitRate","send","templateParams","reject","validateTemplateParams","location","pathname","lib_version","user_id","service_id","template_id","template_params","JSON","stringify","sendForm","form","currentForm","document","querySelector","findHTMLForm","nodeName","validateForm","append"],"sourceRoot":""}